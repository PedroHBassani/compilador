# -*- coding: utf-8 -*-

terminals = [
    'FLOAT_LITERAL', 'INTEGER_LITERAL', 'IF', 'ELSE', 'WHILE', 'INT', 'FLOAT', 
    'VOID', 'RETURN', 'IDENTIFIER', 'NOT', 'AND', 'OR', 'ASSIGN', 'EQUALS', 
    'NOT_EQUALS', 'LESS_THAN_EQ', 'GREATER_THAN_EQ', 'LESS_THAN', 'GREATER_THAN', 
    'PLUS', 'MINUS', 'MULTIPLY', 'DIVIDE', 'LPAREN', 'RPAREN', 'LBRACE', 'RBRACE', 
    'SEMICOLON', 'COMMA', '$'
]

non_terminals = [
    'Program', 'DeclList', 'Decl', 'DeclRest', 'VarDeclRest', 'ParamList', 
    'ParamListRest', 'Param', 'Type', 'Block', 'StmtList', 'Stmt', 'ExprStmt', 
    'IfStmt', 'ElsePart', 'WhileStmt', 'ReturnStmt', 'ReturnStmtRest', 'Expr', 
    'Assignment', 'AssignmentRest', 'LogicOr', 'LogicOrRest', 'LogicAnd', 
    'LogicAndRest', 'Equality', 'EqualityRest', 'Relational', 'RelationalRest', 
    'Additive', 'AdditiveRest', 'Multiplicative', 'MultiplicativeRest', 'Unary', 
    'Primary', 'PrimaryRest', 'ArgList', 'ArgListRest'
]

# Tabela de Parsing Preditivo M[Non-Terminal][Terminal] -> Production
# As produções são representadas como tuplas de strings. 'ε' representa uma produção vazia.
parsing_table = {
    'Program': {'INT': ('DeclList',), 'FLOAT': ('DeclList',), 'VOID': ('DeclList',), '$': ('DeclList',)},
    'DeclList': {'INT': ('Decl', 'DeclList'), 'FLOAT': ('Decl', 'DeclList'), 'VOID': ('Decl', 'DeclList'), '$': ('ε',)},
    'Decl': {'INT': ('Type', 'IDENTIFIER', 'DeclRest'), 'FLOAT': ('Type', 'IDENTIFIER', 'DeclRest'), 'VOID': ('Type', 'IDENTIFIER', 'DeclRest')},
    'DeclRest': {'LPAREN': ('LPAREN', 'ParamList', 'RPAREN', 'Block'), 'ASSIGN': ('VarDeclRest',), 'SEMICOLON': ('VarDeclRest',)},
    'VarDeclRest': {'ASSIGN': ('ASSIGN', 'Expr', 'SEMICOLON'), 'SEMICOLON': ('SEMICOLON',)},
    'ParamList': {'INT': ('Param', 'ParamListRest'), 'FLOAT': ('Param', 'ParamListRest'), 'VOID': ('Param', 'ParamListRest'), 'RPAREN': ('ε',)},
    'ParamListRest': {'COMMA': ('COMMA', 'Param', 'ParamListRest'), 'RPAREN': ('ε',)},
    'Param': {'INT': ('Type', 'IDENTIFIER'), 'FLOAT': ('Type', 'IDENTIFIER'), 'VOID': ('Type', 'IDENTIFIER')},
    'Type': {'INT': ('INT',), 'FLOAT': ('FLOAT',), 'VOID': ('VOID',)},
    'Block': {'LBRACE': ('LBRACE', 'StmtList', 'RBRACE')},
    'StmtList': {'IDENTIFIER': ('Stmt', 'StmtList'), 'LPAREN': ('Stmt', 'StmtList'), 'INTEGER_LITERAL': ('Stmt', 'StmtList'), 'FLOAT_LITERAL': ('Stmt', 'StmtList'), 'SEMICOLON': ('Stmt', 'StmtList'), 'IF': ('Stmt', 'StmtList'), 'WHILE': ('Stmt', 'StmtList'), 'RETURN': ('Stmt', 'StmtList'), 'LBRACE': ('Stmt', 'StmtList'), 'NOT': ('Stmt', 'StmtList'), 'PLUS': ('Stmt', 'StmtList'), 'MINUS': ('Stmt', 'StmtList'), 'RBRACE': ('ε',)},
    'Stmt': {'IDENTIFIER': ('ExprStmt',), 'LPAREN': ('ExprStmt',), 'INTEGER_LITERAL': ('ExprStmt',), 'FLOAT_LITERAL': ('ExprStmt',), 'SEMICOLON': ('ExprStmt',), 'IF': ('IfStmt',), 'WHILE': ('WhileStmt',), 'RETURN': ('ReturnStmt',), 'LBRACE': ('Block',), 'NOT': ('ExprStmt',), 'PLUS': ('ExprStmt',), 'MINUS': ('ExprStmt',)},
    'ExprStmt': {'IDENTIFIER': ('Expr', 'SEMICOLON'), 'LPAREN': ('Expr', 'SEMICOLON'), 'INTEGER_LITERAL': ('Expr', 'SEMICOLON'), 'FLOAT_LITERAL': ('Expr', 'SEMICOLON'), 'SEMICOLON': ('SEMICOLON',), 'NOT': ('Expr', 'SEMICOLON'), 'PLUS': ('Expr', 'SEMICOLON'), 'MINUS': ('Expr', 'SEMICOLON')},
    'IfStmt': {'IF': ('IF', 'LPAREN', 'Expr', 'RPAREN', 'Stmt', 'ElsePart')},
    'ElsePart': {'ELSE': ('ELSE', 'Stmt'), 'IDENTIFIER': ('ε',), 'LPAREN': ('ε',), 'INTEGER_LITERAL': ('ε',), 'FLOAT_LITERAL': ('ε',), 'SEMICOLON': ('ε',), 'IF': ('ε',), 'WHILE': ('ε',), 'RETURN': ('ε',), 'LBRACE': ('ε',), 'RBRACE': ('ε',), 'NOT': ('ε',), 'PLUS': ('ε',), 'MINUS': ('ε',), '$': ('ε',)},
    'WhileStmt': {'WHILE': ('WHILE', 'LPAREN', 'Expr', 'RPAREN', 'Stmt')},
    'ReturnStmt': {'RETURN': ('RETURN', 'ReturnStmtRest')},
    'ReturnStmtRest': {'IDENTIFIER': ('Expr', 'SEMICOLON'), 'LPAREN': ('Expr', 'SEMICOLON'), 'INTEGER_LITERAL': ('Expr', 'SEMICOLON'), 'FLOAT_LITERAL': ('Expr', 'SEMICOLON'), 'SEMICOLON': ('SEMICOLON',), 'NOT': ('Expr', 'SEMICOLON'), 'PLUS': ('Expr', 'SEMICOLON'), 'MINUS': ('Expr', 'SEMICOLON')},
    'Expr': {'IDENTIFIER': ('Assignment',), 'LPAREN': ('Assignment',), 'INTEGER_LITERAL': ('Assignment',), 'FLOAT_LITERAL': ('Assignment',), 'NOT': ('Assignment',), 'PLUS': ('Assignment',), 'MINUS': ('Assignment',)},
    'Assignment': {'IDENTIFIER': ('LogicOr', 'AssignmentRest'), 'LPAREN': ('LogicOr', 'AssignmentRest'), 'INTEGER_LITERAL': ('LogicOr', 'AssignmentRest'), 'FLOAT_LITERAL': ('LogicOr', 'AssignmentRest'), 'NOT': ('LogicOr', 'AssignmentRest'), 'PLUS': ('LogicOr', 'AssignmentRest'), 'MINUS': ('LogicOr', 'AssignmentRest')},
    'AssignmentRest': {'ASSIGN': ('ASSIGN', 'Assignment'), 'SEMICOLON': ('ε',), 'RPAREN': ('ε',), 'COMMA': ('ε',)},
    'LogicOr': {'IDENTIFIER': ('LogicAnd', 'LogicOrRest'), 'LPAREN': ('LogicAnd', 'LogicOrRest'), 'INTEGER_LITERAL': ('LogicAnd', 'LogicOrRest'), 'FLOAT_LITERAL': ('LogicAnd', 'LogicOrRest'), 'NOT': ('LogicAnd', 'LogicOrRest'), 'PLUS': ('LogicAnd', 'LogicOrRest'), 'MINUS': ('LogicAnd', 'LogicOrRest')},
    'LogicOrRest': {'OR': ('OR', 'LogicAnd', 'LogicOrRest'), 'ASSIGN': ('ε',), 'SEMICOLON': ('ε',), 'RPAREN': ('ε',), 'COMMA': ('ε',)},
    'LogicAnd': {'IDENTIFIER': ('Equality', 'LogicAndRest'), 'LPAREN': ('Equality', 'LogicAndRest'), 'INTEGER_LITERAL': ('Equality', 'LogicAndRest'), 'FLOAT_LITERAL': ('Equality', 'LogicAndRest'), 'NOT': ('Equality', 'LogicAndRest'), 'PLUS': ('Equality', 'LogicAndRest'), 'MINUS': ('Equality', 'LogicAndRest')},
    'LogicAndRest': {'AND': ('AND', 'Equality', 'LogicAndRest'), 'OR': ('ε',), 'ASSIGN': ('ε',), 'SEMICOLON': ('ε',), 'RPAREN': ('ε',), 'COMMA': ('ε',)},
    'Equality': {'IDENTIFIER': ('Relational', 'EqualityRest'), 'LPAREN': ('Relational', 'EqualityRest'), 'INTEGER_LITERAL': ('Relational', 'EqualityRest'), 'FLOAT_LITERAL': ('Relational', 'EqualityRest'), 'NOT': ('Relational', 'EqualityRest'), 'PLUS': ('Relational', 'EqualityRest'), 'MINUS': ('Relational', 'EqualityRest')},
    'EqualityRest': {'EQUALS': ('EQUALS', 'Relational', 'EqualityRest'), 'NOT_EQUALS': ('NOT_EQUALS', 'Relational', 'EqualityRest'), 'AND': ('ε',), 'OR': ('ε',), 'ASSIGN': ('ε',), 'SEMICOLON': ('ε',), 'RPAREN': ('ε',), 'COMMA': ('ε',)},
    'Relational': {'IDENTIFIER': ('Additive', 'RelationalRest'), 'LPAREN': ('Additive', 'RelationalRest'), 'INTEGER_LITERAL': ('Additive', 'RelationalRest'), 'FLOAT_LITERAL': ('Additive', 'RelationalRest'), 'NOT': ('Additive', 'RelationalRest'), 'PLUS': ('Additive', 'RelationalRest'), 'MINUS': ('Additive', 'RelationalRest')},
    'RelationalRest': {'LESS_THAN': ('LESS_THAN', 'Additive', 'RelationalRest'), 'LESS_THAN_EQ': ('LESS_THAN_EQ', 'Additive', 'RelationalRest'), 'GREATER_THAN': ('GREATER_THAN', 'Additive', 'RelationalRest'), 'GREATER_THAN_EQ': ('GREATER_THAN_EQ', 'Additive', 'RelationalRest'), 'EQUALS': ('ε',), 'NOT_EQUALS': ('ε',), 'AND': ('ε',), 'OR': ('ε',), 'ASSIGN': ('ε',), 'SEMICOLON': ('ε',), 'RPAREN': ('ε',), 'COMMA': ('ε',)},
    'Additive': {'IDENTIFIER': ('Multiplicative', 'AdditiveRest'), 'LPAREN': ('Multiplicative', 'AdditiveRest'), 'INTEGER_LITERAL': ('Multiplicative', 'AdditiveRest'), 'FLOAT_LITERAL': ('Multiplicative', 'AdditiveRest'), 'NOT': ('Multiplicative', 'AdditiveRest'), 'PLUS': ('Multiplicative', 'AdditiveRest'), 'MINUS': ('Multiplicative', 'AdditiveRest')},
    'AdditiveRest': {'PLUS': ('PLUS', 'Multiplicative', 'AdditiveRest'), 'MINUS': ('MINUS', 'Multiplicative', 'AdditiveRest'), 'LESS_THAN': ('ε',), 'LESS_THAN_EQ': ('ε',), 'GREATER_THAN': ('ε',), 'GREATER_THAN_EQ': ('ε',), 'EQUALS': ('ε',), 'NOT_EQUALS': ('ε',), 'AND': ('ε',), 'OR': ('ε',), 'ASSIGN': ('ε',), 'SEMICOLON': ('ε',), 'RPAREN': ('ε',), 'COMMA': ('ε',)},
    'Multiplicative': {'IDENTIFIER': ('Unary', 'MultiplicativeRest'), 'LPAREN': ('Unary', 'MultiplicativeRest'), 'INTEGER_LITERAL': ('Unary', 'MultiplicativeRest'), 'FLOAT_LITERAL': ('Unary', 'MultiplicativeRest'), 'NOT': ('Unary', 'MultiplicativeRest'), 'PLUS': ('Unary', 'MultiplicativeRest'), 'MINUS': ('Unary', 'MultiplicativeRest')},
    'MultiplicativeRest': {'MULTIPLY': ('MULTIPLY', 'Unary', 'MultiplicativeRest'), 'DIVIDE': ('DIVIDE', 'Unary', 'MultiplicativeRest'), 'PLUS': ('ε',), 'MINUS': ('ε',), 'LESS_THAN': ('ε',), 'LESS_THAN_EQ': ('ε',), 'GREATER_THAN': ('ε',), 'GREATER_THAN_EQ': ('ε',), 'EQUALS': ('ε',), 'NOT_EQUALS': ('ε',), 'AND': ('ε',), 'OR': ('ε',), 'ASSIGN': ('ε',), 'SEMICOLON': ('ε',), 'RPAREN': ('ε',), 'COMMA': ('ε',)},
    'Unary': {'NOT': ('NOT', 'Unary'), 'PLUS': ('PLUS', 'Unary'), 'MINUS': ('MINUS', 'Unary'), 'IDENTIFIER': ('Primary',), 'LPAREN': ('Primary',), 'INTEGER_LITERAL': ('Primary',), 'FLOAT_LITERAL': ('Primary',)},
    'Primary': {'IDENTIFIER': ('IDENTIFIER', 'PrimaryRest'), 'LPAREN': ('LPAREN', 'Expr', 'RPAREN'), 'INTEGER_LITERAL': ('INTEGER_LITERAL',), 'FLOAT_LITERAL': ('FLOAT_LITERAL',)},
    'PrimaryRest': {'LPAREN': ('LPAREN', 'ArgList', 'RPAREN'), 'MULTIPLY': ('ε',), 'DIVIDE': ('ε',), 'PLUS': ('ε',), 'MINUS': ('ε',), 'LESS_THAN': ('ε',), 'LESS_THAN_EQ': ('ε',), 'GREATER_THAN': ('ε',), 'GREATER_THAN_EQ': ('ε',), 'EQUALS': ('ε',), 'NOT_EQUALS': ('ε',), 'AND': ('ε',), 'OR': ('ε',), 'ASSIGN': ('ε',), 'SEMICOLON': ('ε',), 'RPAREN': ('ε',), 'COMMA': ('ε',)},
    'ArgList': {'IDENTIFIER': ('Expr', 'ArgListRest'), 'LPAREN': ('Expr', 'ArgListRest'), 'INTEGER_LITERAL': ('Expr', 'ArgListRest'), 'FLOAT_LITERAL': ('Expr', 'ArgListRest'), 'NOT': ('Expr', 'ArgListRest'), 'PLUS': ('Expr', 'ArgListRest'), 'MINUS': ('Expr', 'ArgListRest'), 'RPAREN': ('ε',)},
    'ArgListRest': {'COMMA': ('COMMA', 'Expr', 'ArgListRest'), 'RPAREN': ('ε',)},
}

# Conjuntos Follow para recuperação de erro (modo pânico)
follow_sets = {
    'Program': {'$'},
    'DeclList': {'$'},
    'Decl': {'INT', 'FLOAT', 'VOID', '$'},
    'DeclRest': {'INT', 'FLOAT', 'VOID', '$'},
    'VarDeclRest': {'INT', 'FLOAT', 'VOID', '$'},
    'ParamList': {'RPAREN'},
    'ParamListRest': {'RPAREN'},
    'Param': {'COMMA', 'RPAREN'},
    'Type': {'IDENTIFIER'},
    'Block': {'INT', 'FLOAT', 'VOID', '$', 'ELSE', 'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS'},
    'StmtList': {'RBRACE'},
    'Stmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ExprStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'IfStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ElsePart': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'WhileStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ReturnStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ReturnStmtRest': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'Expr': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'Assignment': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'AssignmentRest': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicOr': {'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicOrRest': {'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicAnd': {'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicAndRest': {'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Equality': {'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'EqualityRest': {'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Relational': {'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'RelationalRest': {'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Additive': {'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'AdditiveRest': {'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Multiplicative': {'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'MultiplicativeRest': {'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Unary': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Primary': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'PrimaryRest': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'ArgList': {'RPAREN'},
    'ArgListRest': {'RPAREN'},
}

# Conjuntos Follow para recuperação de erro (modo pânico)
follow_sets = {
    'Program': {'$'},
    'DeclList': {'$'},
    'Decl': {'INT', 'FLOAT', 'VOID', '$'},
    'DeclRest': {'INT', 'FLOAT', 'VOID', '$'},
    'VarDeclRest': {'INT', 'FLOAT', 'VOID', '$'},
    'ParamList': {'RPAREN'},
    'ParamListRest': {'RPAREN'},
    'Param': {'COMMA', 'RPAREN'},
    'Type': {'IDENTIFIER'},
    'Block': {'INT', 'FLOAT', 'VOID', '$', 'ELSE', 'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS'},
    'StmtList': {'RBRACE'},
    'Stmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ExprStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'IfStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ElsePart': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'WhileStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ReturnStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ReturnStmtRest': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'Expr': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'Assignment': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'AssignmentRest': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicOr': {'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicOrRest': {'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicAnd': {'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicAndRest': {'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Equality': {'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'EqualityRest': {'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Relational': {'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'RelationalRest': {'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Additive': {'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'AdditiveRest': {'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Multiplicative': {'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'MultiplicativeRest': {'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Unary': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Primary': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'PrimaryRest': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'ArgList': {'RPAREN'},
    'ArgListRest': {'RPAREN'},
}

# Conjuntos Follow para recuperação de erro (modo pânico)
follow_sets = {
    'Program': {'$'},
    'DeclList': {'$'},
    'Decl': {'INT', 'FLOAT', 'VOID', '$'},
    'DeclRest': {'INT', 'FLOAT', 'VOID', '$'},
    'VarDeclRest': {'INT', 'FLOAT', 'VOID', '$'},
    'ParamList': {'RPAREN'},
    'ParamListRest': {'RPAREN'},
    'Param': {'COMMA', 'RPAREN'},
    'Type': {'IDENTIFIER'},
    'Block': {'INT', 'FLOAT', 'VOID', '$', 'ELSE', 'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS'},
    'StmtList': {'RBRACE'},
    'Stmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ExprStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'IfStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ElsePart': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'WhileStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ReturnStmt': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'ReturnStmtRest': {'IDENTIFIER', 'LPAREN', 'INTEGER_LITERAL', 'FLOAT_LITERAL', 'SEMICOLON', 'IF', 'WHILE', 'RETURN', 'LBRACE', 'RBRACE', 'NOT', 'PLUS', 'MINUS', 'ELSE', '$'},
    'Expr': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'Assignment': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'AssignmentRest': {'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicOr': {'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicOrRest': {'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicAnd': {'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'LogicAndRest': {'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Equality': {'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'EqualityRest': {'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Relational': {'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'RelationalRest': {'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Additive': {'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'AdditiveRest': {'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Multiplicative': {'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'MultiplicativeRest': {'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Unary': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'Primary': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'PrimaryRest': {'MULTIPLY', 'DIVIDE', 'PLUS', 'MINUS', 'LESS_THAN', 'LESS_THAN_EQ', 'GREATER_THAN', 'GREATER_THAN_EQ', 'EQUALS', 'NOT_EQUALS', 'AND', 'OR', 'ASSIGN', 'SEMICOLON', 'RPAREN', 'COMMA'},
    'ArgList': {'RPAREN'},
    'ArgListRest': {'RPAREN'},
}
